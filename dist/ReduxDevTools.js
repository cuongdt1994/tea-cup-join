"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2019 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withReduxDevTools = void 0;
function defaultTeaCupToReduxMessage(msg) {
    const { tag, type } = msg, others = __rest(msg, ["tag", "type"]);
    return Object.assign({ type: type || tag }, others);
}
function withReduxDevTools(dt, options) {
    const reduxDevtoolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;
    if (reduxDevtoolsExtension) {
        const reduxDevTools = reduxDevtoolsExtension.connect(options);
        reduxDevTools.subscribe((message) => {
            var _a, _b;
            if (message.type === 'DISPATCH' && message.state) {
                // console.log('DISPATCH', message.payload);
                if (((_a = message.payload) === null || _a === void 0 ? void 0 : _a.type) === 'JUMP_TO_ACTION' || ((_b = message.payload) === null || _b === void 0 ? void 0 : _b.type) === 'JUMP_TO_STATE') {
                    // console.log('travelling to ', message.payload.actionId);
                    dt.travelTo(message.payload.actionId);
                }
            }
        });
        const teacupToReduxMessage = (options === null || options === void 0 ? void 0 : options.teacupToReduxMessage) || defaultTeaCupToReduxMessage;
        dt.addListener((e) => {
            switch (e.tag) {
                case 'init':
                    reduxDevTools.init(e.model);
                    break;
                case 'updated':
                    const action = teacupToReduxMessage(e.msg);
                    reduxDevTools.send(action, e.modelAfter);
                    break;
            }
        });
    }
    return dt;
}
exports.withReduxDevTools = withReduxDevTools;
//# sourceMappingURL=data:application/json;base64,