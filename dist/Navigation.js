"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2019 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = exports.RouteDef = exports.route3 = exports.route2 = exports.route1 = exports.route0 = exports.Path3 = exports.Path2 = exports.Path1 = exports.QueryParams = exports.Path0 = exports.regex = exports.int = exports.str = exports.PathElem = exports.newUrl = exports.ProgramWithNav = void 0;
const Program_1 = require("./Program");
const tea_cup_core_1 = require("tea-cup-core");
const React = __importStar(require("react"));
const react_1 = require("react");
/**
 * Program that handles navigation (routing).
 */
class ProgramWithNav extends react_1.Component {
    constructor(props) {
        super(props);
        this.ref = react_1.createRef();
        this.listener = tea_cup_core_1.nothing;
    }
    render() {
        return (React.createElement(Program_1.Program, { init: () => this.props.init(window.location), view: this.props.view, update: this.props.update, subscriptions: this.props.subscriptions, devTools: this.props.devTools, ref: this.ref }));
    }
    componentDidMount() {
        const l = () => {
            if (this.ref.current) {
                this.ref.current.dispatch(this.props.onUrlChange(window.location));
            }
        };
        this.listener = tea_cup_core_1.just(l);
        window.addEventListener('popstate', l);
    }
    componentWillUnmount() {
        if (this.listener.type === 'Just') {
            window.removeEventListener('popstate', this.listener.value);
            this.listener = tea_cup_core_1.nothing;
        }
    }
}
exports.ProgramWithNav = ProgramWithNav;
/**
 * Return a Task that will eventually change the browser location via historty.pushState,
 * and send back a Msg into the Program
 * @param url the url to navigate to
 */
function newUrl(url) {
    return new NewUrlTask(url);
}
exports.newUrl = newUrl;
class NewUrlTask extends tea_cup_core_1.Task {
    constructor(url) {
        super();
        this.url = url;
    }
    execute(callback) {
        const state = {};
        window.history.pushState(state, '', this.url);
        const popStateEvent = new PopStateEvent('popstate', { state: state });
        dispatchEvent(popStateEvent);
        callback(new tea_cup_core_1.Ok(document.location));
    }
}
// router
// ------
class PathElem {
}
exports.PathElem = PathElem;
class ConstantPathElem extends PathElem {
    constructor(s) {
        super();
        this.s = s;
    }
    mapPart(part) {
        if (part === this.s) {
            return tea_cup_core_1.just(part);
        }
        else {
            return tea_cup_core_1.nothing;
        }
    }
}
class RegexPathElem extends PathElem {
    constructor(regex, converter) {
        super();
        this.regex = regex.compile();
        this.converter = converter;
    }
    mapPart(part) {
        if (this.regex.test(part)) {
            return this.converter(part);
        }
        else {
            return tea_cup_core_1.nothing;
        }
    }
}
class IntPathElem extends RegexPathElem {
    constructor() {
        super(new RegExp('^\\d+$'), (s) => {
            try {
                const i = parseInt(s, 10);
                if (isNaN(i)) {
                    return tea_cup_core_1.nothing;
                }
                else {
                    return tea_cup_core_1.just(i);
                }
            }
            catch (e) {
                return tea_cup_core_1.nothing;
            }
        });
    }
}
IntPathElem.INSTANCE = new IntPathElem();
class StrPathElem extends PathElem {
    mapPart(part) {
        return tea_cup_core_1.just(part);
    }
}
function str(s) {
    if (s === undefined) {
        return new StrPathElem();
    }
    else {
        return new ConstantPathElem(s);
    }
}
exports.str = str;
function int() {
    return IntPathElem.INSTANCE;
}
exports.int = int;
function regex(r, converter) {
    return new RegexPathElem(r, converter);
}
exports.regex = regex;
class Path0 {
    map(f) {
        return new RouteDef([], f);
    }
}
exports.Path0 = Path0;
class QueryParams {
    constructor(store, hash) {
        this.store = store;
        this.hash = hash;
    }
    getValues(name) {
        return tea_cup_core_1.maybeOf(this.store[name]);
    }
    getValue(name) {
        const values = this.store[name];
        if (values === undefined) {
            return tea_cup_core_1.nothing;
        }
        else {
            return tea_cup_core_1.List.fromArray(values).head();
        }
    }
    getHash() {
        return this.hash;
    }
    static empty() {
        return new QueryParams({}, tea_cup_core_1.nothing);
    }
    static fromQueryStringAndHash(queryString, hash) {
        const params = queryString === undefined ? [] : queryString.split('&');
        const store = {};
        function addToStore(name, value) {
            let values = store[name];
            if (values === undefined) {
                values = [value];
                store[name] = values;
            }
            else {
                values.push(value);
            }
        }
        params.forEach((param) => {
            const parts = param.split('=');
            if (parts.length === 1) {
                addToStore(parts[0], '');
            }
            else if (parts.length > 1) {
                addToStore(parts[0], parts[1]);
            }
        });
        return new QueryParams(store, hash === '' ? tea_cup_core_1.nothing : tea_cup_core_1.maybeOf(hash).map((h) => (h.startsWith('#') ? h.substring(1) : h)));
    }
}
exports.QueryParams = QueryParams;
class Path1 {
    constructor(e) {
        this.e = e;
    }
    map(f) {
        return new RouteDef([this.e], f);
    }
}
exports.Path1 = Path1;
class Path2 {
    constructor(e1, e2) {
        this.e1 = e1;
        this.e2 = e2;
    }
    map(f) {
        return new RouteDef([this.e1, this.e2], f);
    }
}
exports.Path2 = Path2;
class Path3 {
    constructor(e1, e2, e3) {
        this.e1 = e1;
        this.e2 = e2;
        this.e3 = e3;
    }
    map(f) {
        return new RouteDef([this.e1, this.e2, this.e3], f);
    }
}
exports.Path3 = Path3;
exports.route0 = new Path0();
function route1(e) {
    return new Path1(e);
}
exports.route1 = route1;
function route2(e1, e2) {
    return new Path2(e1, e2);
}
exports.route2 = route2;
function route3(e1, e2, e3) {
    return new Path3(e1, e2, e3);
}
exports.route3 = route3;
class RouteDef {
    constructor(pathElems, f) {
        this.pathElems = pathElems;
        this.f = f;
    }
    static sanitizePath(path) {
        const p1 = path.startsWith('/') ? path.substring(1) : path;
        return p1.endsWith('/') ? p1.substring(0, p1.length - 1) : p1;
    }
    static splitPath(path) {
        const p = RouteDef.sanitizePath(path);
        return p === '' ? [] : p.split('/').map(decodeURIComponent);
    }
    checkRoute(pathname, query) {
        // extract path parts from location and split
        const parts = RouteDef.splitPath(pathname);
        if (parts.length === this.pathElems.length) {
            // map every individual part, bail out if
            // something cannot be converted
            const mappedParts = [];
            for (let i = 0; i < parts.length; i++) {
                const part = parts[i];
                const pe = this.pathElems[i];
                const mapped = pe.mapPart(part);
                switch (mapped.type) {
                    case 'Just':
                        mappedParts.push(mapped.value);
                        break;
                    case 'Nothing':
                        return tea_cup_core_1.nothing;
                }
            }
            // append query params to args
            mappedParts.push(query);
            // now we have mapped args, let's call the route's func
            return tea_cup_core_1.just(this.f.apply({}, mappedParts));
        }
        else {
            return tea_cup_core_1.nothing;
        }
    }
}
exports.RouteDef = RouteDef;
class Router {
    constructor(...routeDefs) {
        this.routes = routeDefs;
    }
    parse(pathname, query) {
        // try all routes one after the other
        for (let i = 0; i < this.routes.length; i++) {
            const d = this.routes[i];
            const r = d.checkRoute(pathname, query);
            if (r.type === 'Just') {
                return r;
            }
        }
        return tea_cup_core_1.nothing;
    }
    parseLocation(location) {
        return this.parse(location.pathname, QueryParams.fromQueryStringAndHash(location.search, location.hash));
    }
}
exports.Router = Router;
//# sourceMappingURL=data:application/json;base64,