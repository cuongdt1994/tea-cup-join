"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2019 RÃ©mi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateUntilIdle = exports.Testing = exports.extendJest = void 0;
const tea_cup_core_1 = require("tea-cup-core");
const _1 = require(".");
const react_1 = __importDefault(require("react"));
function extendJest(expect) {
    expect.extend({
        toHaveDispatchedMsg(received, expected) {
            const pass = this.equals(received.dispatched, expected);
            const message = () => this.utils.matcherHint('toBe', undefined, undefined) +
                '\n\n' +
                `Expected: ${this.utils.printExpected(expected)}\n` +
                `Received: ${this.utils.printReceived(received.dispatched)}`;
            return { actual: received, message, pass };
        },
    });
}
exports.extendJest = extendJest;
class Testing {
    constructor() {
        this.noop = () => { };
    }
    Testing() { }
    get dispatcher() {
        this._dispatched = undefined;
        return (msg) => {
            this._dispatched = msg;
        };
    }
    get dispatched() {
        return this._dispatched;
    }
    dispatchFrom(cmd) {
        return new Promise((resolve, reject) => {
            const dispatchedMsg = (msg) => {
                resolve(msg);
            };
            cmd.execute(dispatchedMsg);
        });
    }
}
exports.Testing = Testing;
function updateUntilIdle(props, fun) {
    return new Promise((resolve) => {
        let wrapper = fun(react_1.default.createElement(_1.Program, Object.assign({}, testableProps(resolve, props, () => wrapper))));
    });
}
exports.updateUntilIdle = updateUntilIdle;
function testableProps(resolve, props, getWrapper) {
    const tprops = {
        init: initTestable(resolve, props.init),
        view: viewTestable(props.view),
        update: updateTestable(props.update),
        subscriptions: subscriptionsTestable(props, getWrapper),
    };
    return tprops;
}
function initTestable(resolve, init) {
    const mac = init();
    return () => [
        {
            resolve,
            cmds: [mac[1]],
            model: mac[0],
        },
        tea_cup_core_1.Cmd.none(),
    ];
}
function viewTestable(view) {
    return (dispatch, model) => view(dispatch, model.model);
}
function updateTestable(update) {
    return (msg, model) => {
        const [model1, cmd1] = update(msg, model.model);
        const cmds = [cmd1].filter((cmd) => cmd.constructor.name !== 'CmdNone');
        return [
            Object.assign(Object.assign({}, model), { cmds, model: model1 }),
            tea_cup_core_1.Cmd.none(),
        ];
    };
}
function subscriptionsTestable(props, getWrapper) {
    return (model) => {
        const subs = props.subscriptions(model.model);
        if (model.cmds.length === 0) {
            const result = getWrapper();
            model.resolve([model.model, result]);
            return subs;
        }
        return tea_cup_core_1.Sub.batch([new TestableSub(model.cmds), subs]);
    };
}
class TestableSub extends tea_cup_core_1.Sub {
    constructor(cmds) {
        super();
        this.cmds = cmds;
    }
    onInit() {
        setTimeout(() => {
            this.isActive() && this.cmds.forEach((cmd) => cmd.execute((m) => this.dispatch(m)));
            // if (this.dispatcher !== undefined) {
            //   const d = this.dispatcher.bind(this);
            //   this.cmds.map((cmd) => cmd.execute(d));
            // }
        }, 0);
    }
}
//# sourceMappingURL=data:application/json;base64,