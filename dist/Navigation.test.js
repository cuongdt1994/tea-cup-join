"use strict";
/*
 * MIT License
 *
 * Copyright (c) 2019 Rémi Van Keisbelck
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Navigation_1 = require("./Navigation");
const tea_cup_core_1 = require("tea-cup-core");
function home() {
    return { type: 'home' };
}
function songs(filter = tea_cup_core_1.nothing) {
    return { type: 'songs', filter: filter };
}
function song(id, edit = false) {
    return {
        type: 'song',
        id: id,
        edit: edit,
    };
}
function settings(section) {
    return {
        type: 'settings',
        section: section,
    };
}
function withSlashes(rest) {
    return {
        type: 'with-slashes',
        rest: rest,
    };
}
function withSpaces(v) {
    return {
        type: 'with-spaces',
        v: v,
    };
}
const router = new Navigation_1.Router(Navigation_1.route1(Navigation_1.str('songs')).map((s, query) => songs(query.getValue('q'))), Navigation_1.route0.map(() => home()), Navigation_1.route3(Navigation_1.str('song'), Navigation_1.int(), Navigation_1.str('edit')).map((s, id) => song(id, true)), Navigation_1.route2(Navigation_1.str('song'), Navigation_1.int()).map((_, id) => song(id)), Navigation_1.route1(Navigation_1.str('settings')).map((_, query) => settings(query.getHash())), Navigation_1.route2(Navigation_1.str('with-spaces'), Navigation_1.str()).map((_, v) => {
    return withSpaces(v);
}), {
    checkRoute(pathname, query) {
        const parts = Navigation_1.RouteDef.splitPath(pathname);
        if (parts.length < 2) {
            return tea_cup_core_1.nothing;
        }
        if (parts[0] !== 'with' || parts[1] !== 'slashes') {
            return tea_cup_core_1.nothing;
        }
        const rest = parts.length === 2 ? tea_cup_core_1.nothing : tea_cup_core_1.just(parts.slice(2).join('/'));
        return tea_cup_core_1.just(withSlashes(rest));
    },
});
expectRoute('/', home());
expectRoute('/songs', songs(tea_cup_core_1.nothing));
expectRoute('/songs/', songs(tea_cup_core_1.nothing));
expectRoute('/song/123', song(123));
expectRoute('/song/123/edit', song(123, true));
expectRoute('/songs?q=foobar', songs(tea_cup_core_1.just('foobar')));
expectRoute('/settings', settings(tea_cup_core_1.nothing));
expectRoute('/settings#blah', settings(tea_cup_core_1.just('blah')));
expectRoute('/with/slashes', withSlashes(tea_cup_core_1.nothing));
expectRoute('/with/slashes/foo', withSlashes(tea_cup_core_1.just('foo')));
expectRoute('/with/slashes/foo/bar', withSlashes(tea_cup_core_1.just('foo/bar')));
expectRoute('/with/slashes/foo/bar/baz', withSlashes(tea_cup_core_1.just('foo/bar/baz')));
expectRoute('/with-spaces/foo%20bar', withSpaces('foo bar'));
expectRoute('/with-spaces/j%26-suis_un%2Bt%C3%A9st%3Dpourl%40Q%4089%23%20%C3%A8%20je%20suis%20f%C3%A0o%C3%A7', withSpaces('j&-suis_un+tést=pourl@Q@89# è je suis fàoç'));
expectNotFound('/foo');
expectNotFound('/songs/1');
expectNotFound('/song');
expectNotFound('/song/abc');
expectNotFound('/song/123/foo');
expectSettingRouteHash('/settings#blah', tea_cup_core_1.just('blah'));
expectSettingRouteHash('/settings', tea_cup_core_1.nothing);
expectSettingRouteHash('/settings?hello', tea_cup_core_1.nothing);
expectSettingRouteHash('/settings?hello#blah', tea_cup_core_1.just('blah'));
function locFromUrl(url) {
    const indexOfQ = url.indexOf('?');
    if (indexOfQ === -1) {
        const indexOfH = url.indexOf('#');
        if (indexOfH === -1) {
            return {
                pathname: url,
                query: Navigation_1.QueryParams.empty(),
            };
        }
        else {
            return {
                pathname: url.substring(0, indexOfH),
                query: Navigation_1.QueryParams.fromQueryStringAndHash(undefined, url.substring(indexOfH + 1)),
            };
        }
    }
    else {
        const pathname = url.substring(0, indexOfQ);
        const rest = url.substring(indexOfQ + 1);
        const indexOfH = rest.indexOf('#');
        if (indexOfH === -1) {
            return {
                pathname: pathname,
                query: Navigation_1.QueryParams.fromQueryStringAndHash(rest),
            };
        }
        else {
            const q = rest.substring(0, indexOfH);
            const h = rest.substring(indexOfH + 1);
            return {
                pathname: pathname,
                query: Navigation_1.QueryParams.fromQueryStringAndHash(q, h),
            };
        }
    }
}
function locationFromLoc(url, loc) {
    return {
        ancestorOrigins: null,
        assign(url) { },
        hash: url.includes('#') ? url.split('#')[1] : '',
        host: '',
        hostname: '',
        href: '',
        origin: '',
        pathname: loc.pathname,
        port: '',
        protocol: '',
        reload() { },
        replace(url) { },
        search: '',
    };
}
function expectRoute(url, route) {
    return test(url, () => {
        const loc = locFromUrl(url);
        expect(router.parse(loc.pathname, loc.query)).toEqual(tea_cup_core_1.just(route));
    });
}
function expectNotFound(url) {
    return test(url + ' (not found)', () => {
        const loc = locFromUrl(url);
        expect(router.parse(loc.pathname, loc.query)).toEqual(tea_cup_core_1.nothing);
    });
}
function expectSettingRouteHash(url, hash) {
    return test(url + ' (hash)', () => {
        const loc = locFromUrl(url);
        const location = locationFromLoc(url, loc);
        const route = router.parseLocation(location);
        route
            .map((r) => {
            if (r.type === 'settings') {
                return expect(r.section).toEqual(hash);
            }
            throw new Error('Not the settings route!');
        })
            .withDefaultSupply(() => {
            throw new Error('Invalid Route!');
        });
    });
}
//# sourceMappingURL=data:application/json;base64,